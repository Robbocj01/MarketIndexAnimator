options("getSymbols.warning4.0"=FALSE)
symbols <- c(
"SPY", # iShares Russell 2000 Index ETF
"TLT") # iShares Barclays 20+ Yr Treas. Bond ETF
suppressMessages(getSymbols(symbols, src='csv',format="%Y-%m-%d",index.class = "POSIXct",
col.names=c("Open","High","Low","Close","Volume","Adjusted")))
#Subset datasets
from <- "2010-01-31"
to <- "2020-06-01"
list_of_symbols <- mget(symbols)
stocks <- lapply(list_of_symbols, function(x) {
#Do something with each symbol
x[paste0(from,"/",to)]
})
list2env(stocks,globalenv())
#######################################
# 3 - Create Returns File for Analysis
#######################################
# Combine XTS datafiles into one file with closeprice
close_data <- do.call(merge, lapply(as.vector(symbols), function(x) Cl(get(x))))
names(close_data) <- gsub(x = names(close_data), pattern = ".Close", replacement = "")
#Cleaning up environment
rm(list = symbols)
rm(list = c("stocks","list_of_symbols"))
nperiods <- nrow(close_data)
turbulence = close_data[,1] * NA
ret <- diff(log(close_data), lag=1)
#######################################
# 4 - Run Financial Turbulence Index
#######################################
look.back = 252
for( i in (look.back+1) : nperiods ) {
temp = ret[(i - look.back + 1):(i-1), ]
# measures turbulence for the current observation
turbulence[i] = mahalanobis(ret[i,], colMeans(temp), cov(temp))
if( i %% 200 == 0) cat(i, 'out of', nperiods, '\n')
}
turbulence <- na.omit(turbulence)
line <- ggplot(turbulence, aes(y = SPY)) +
geom_bar(colour = "#1380A1", size = 1) +
bbc_style() +
labs(title="Living longer",
subtitle = "Life expectancy in Malawi 1952-2007")
line
ggplot(bar_df, aes(x = index(turbulence), y = SPY)) +
geom_bar(stat="identity",
position="identity",
fill="#1380A1") +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
bbc_style()
ggplot(turbulence, aes(x = index(turbulence), y = SPY)) +
geom_bar(stat="identity",
position="identity",
fill="#1380A1") +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
bbc_style()
ggplot(turbulence, aes(x = index(turbulence), y = SPY)) +
geom_bar(stat="identity",
position="identity",
fill="#1380A1") +
geom_hline(yintercept = 0, size = 2, colour="#333333") +
bbc_style()
ggplot(turbulence, aes(x = index(turbulence), y = SPY)) +
geom_bar(stat="identity",
position="identity",
fill="#1380A1") +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
bbc_style() +
labs(title="Reunion is highest",
subtitle = "Highest African life expectancy, 2007")
ggplot(turbulence, aes(x = index(turbulence), y = SPY)) +
geom_bar(stat="identity",
position="identity",
fill="#1380A1",size = 1) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
bbc_style()
ggplot(turbulence, aes(x = index(turbulence), y = SPY)) +
geom_bar(stat="identity",
position="identity",
fill="#1380A1",size = 2) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
bbc_style()
?geom_bar
##############################
# Financial Turbulence Index
# By Chris Robertson
# July 2020
##############################
##############################
# 0 - Load libraries
##############################
library(quantmod)
library(extrafont)
library(ggplot2)
library(bbplot)
windowsFonts(Helvetica = "TT Arial")
##############################
# 1 - Prepare Environment
##############################
# Tidy up environment
rm(list = ls())
options(width=70)
#Sets working directory for data load
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
##############################
# 2 - Loading Datafiles
##############################
options("getSymbols.warning4.0"=FALSE)
symbols <- c(
"SPY", # iShares Russell 2000 Index ETF
"TLT") # iShares Barclays 20+ Yr Treas. Bond ETF
suppressMessages(getSymbols(symbols, src='csv',format="%Y-%m-%d",index.class = "POSIXct",
col.names=c("Open","High","Low","Close","Volume","Adjusted")))
#Subset datasets
from <- "2010-01-31"
to <- "2020-06-01"
list_of_symbols <- mget(symbols)
stocks <- lapply(list_of_symbols, function(x) {
#Do something with each symbol
x[paste0(from,"/",to)]
})
list2env(stocks,globalenv())
#######################################
# 3 - Create Returns File for Analysis
#######################################
# Combine XTS datafiles into one file with closeprice
close_data <- do.call(merge, lapply(as.vector(symbols), function(x) Cl(get(x))))
names(close_data) <- gsub(x = names(close_data), pattern = ".Close", replacement = "")
#Cleaning up environment
rm(list = symbols)
rm(list = c("stocks","list_of_symbols"))
nperiods <- nrow(close_data)
turbulence = close_data[,1] * NA
ret <- diff(log(close_data), lag=1)
#######################################
# 4 - Run Financial Turbulence Index
#######################################
look.back = 252
for( i in (look.back+1) : nperiods ) {
temp = ret[(i - look.back + 1):(i-1), ]
# measures turbulence for the current observation
turbulence[i] = mahalanobis(ret[i,], colMeans(temp), cov(temp))
if( i %% 200 == 0) cat(i, 'out of', nperiods, '\n')
}
ggplot(turbulence, aes(x = index(turbulence), y = SPY)) +
geom_bar(stat="identity",
position="identity",
fill="#1380A1", na.rm = TRUE ) +
geom_hline(yintercept = 0, size = 1, colour="#333333") +
bbc_style() +
labs(title="Reunion is highest",
subtitle = "Highest African life expectancy, 2007")
close_data
ggplot(turbulence, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23)
turbulence
ggplot(close_data, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23)
ggplot(ret, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23)
ggplot(ret, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23,na.rm = TRUE)
ret_M<- ret[endpoints(ret,'months')]
ggplot(ret_M, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23,na.rm = TRUE)
ret_M<- ret[endpoints(ret,'weeks')]
scatter <- ggplot(ret_M, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23,na.rm = TRUE)
ggplot(ret_M, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23,na.rm = TRUE)+
bbc_style()
ggplot(ret_M, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23,na.rm = TRUE)
max(turbulence$SPY)
turbulence$SPY
?max
max(turbulence$SPY,na.rm = TRUE)
max(ret_M$SPY,na.rm = TRUE)
ggplot(ret_M, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23,na.rm = TRUE)+
bbc_style()
?stat_ellipse()
ggplot(ret_M, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23,na.rm = TRUE)+
bbc_style() +
stat_ellipse()
ggplot(ret_M, aes(x = SPY, y = TLT)) +
geom_point(size=2, shape=23,na.rm = TRUE)+
bbc_style() +
stat_ellipse()+
geom_hline(yintercept=0)
#### Efficient Way to track and install packages ####
## Package Names
packages <-c("ggplot2","dplyr","tidyr","corrplot","quantmod","stringr","IBrokers","tidyquant","tidyverse","devtools",
"shiny","caret","pROC","gganimate", "gifski","magick", "lubridate","scales", "grid","transformr","FinancialInstrument",
"PerformanceAnalytics","rattle","Quandl")
## Checks for packages not yet installed
installed_packages <- packages %in% rownames(install.packages())
if(any(installed_packages==FALSE)){
install.packages(packages[!installed_packages])
}
# Installs packages
invisible(lapply(packages,library,character.only = TRUE))
install.packages(packages[!installed_packages])
library(tidyverse)
library(gganimate)
library(transformr)
library(gifski)
library(magick)
library(lubridate)
library(grid)
library(scales)
# Remove any residual lists and free up memory
rm(list = ls())
gc()
setwd("C:/Users/rober/OneDrive/Market Data")
## Use set.seed function to ensure the results are repeatable
set.seed(5)
df_stock <- read.csv("SPX-I.csv", stringsAsFactors = FALSE)
df_stock$Date <- as.Date(df_stock$Date, "%Y-%m-%d")
df_risk <- read.csv("VIX-I.csv", stringsAsFactors = FALSE)
df_risk$Date <- as.Date(df_risk$Date, "%Y-%m-%d")
# Subset Aussie Data and Update labels
xStock <- df_stock %>%
select(Date,Close) %>%
filter(Date > "2018-12-31")
xRisk <- df_risk %>%
select(Date,Close) %>%
filter(Date > "2018-12-31")
# Create plots (p1 = cumulative sum, p2 = natural log of cumulative sum)
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p1 <- ggplot(xStock, aes(x = Date, y = Close, group = 1)) +
geom_line(size=1, color = "#00AFBB") +
scale_colour_manual(values=cbPalette) +
theme_minimal() +
transition_reveal(Date) +  # Changes plot by date
coord_cartesian(clip = 'off') +
labs(title = 'Date: {frame_along}',
y = "SP500 Index Level",
caption = "Market Correction | Chris Robertson  |  Twitter: @Robbocj01  |") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
plot.caption = element_text(hjust=1, face="italic", color="#333333"),
legend.position = c(.05, .95),
legend.justification = c("left", "top"))
a_gif <- animate(p1, 200, fps = 25, width = 310, height = 400)
p2 <- ggplot(xRisk, aes(x = Date, y = Close, group = 1)) +
geom_line(size=1, color = "#E69F00") +
scale_colour_manual(values=cbPalette) +
theme_minimal() +
transition_reveal(Date) +  # Changes plot by date
coord_cartesian(clip = 'off') +
labs(y = "VIX Index Level", caption = " ") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
plot.caption = element_text(hjust=1, face="italic", color="#333333"),
legend.position = c(.05, .95),
legend.justification = c("left", "top"))
b_gif <- animate(p2, 200, fps = 25, width = 270, height = 400)
# Combine GIF (i must be indexed from 2 to the number of frames)
a_mgif <- image_read(a_gif)
b_mgif <- image_read(b_gif)
new_gif <- image_append(c(a_mgif[1], b_mgif[1]))
for(i in 2:200){
combined <- image_append(c(a_mgif[i], b_mgif[i]))
new_gif <- c(new_gif, combined)
}
new_gif
library(tidyverse)
library(gganimate)
library(transformr)
library(gifski)
library(magick)
library(lubridate)
library(grid)
library(scales)
# Remove any residual lists and free up memory
rm(list = ls())
gc()
setwd("C:/Users/rober/OneDrive/Market Data")
## Use set.seed function to ensure the results are repeatable
set.seed(5)
df_stock <- read.csv("SPX.csv", stringsAsFactors = FALSE)
df_stock$Date <- as.Date(df_stock$Date, "%Y-%m-%d")
library(tidyverse)
library(gganimate)
library(transformr)
library(gifski)
library(magick)
library(lubridate)
library(grid)
library(scales)
# Remove any residual lists and free up memory
rm(list = ls())
gc()
setwd("C:/Users/rober/OneDrive/Market Data")
## Use set.seed function to ensure the results are repeatable
set.seed(5)
df_stock <- read.csv("SPY.csv", stringsAsFactors = FALSE)
df_stock$Date <- as.Date(df_stock$Date, "%Y-%m-%d")
xStock <- df_stock %>%
select(Date,Close) %>%
filter(Date > "2018-12-31")
View(xStock)
df_risk <- read.csv("VIX-I.csv", stringsAsFactors = FALSE)
df_risk$Date <- as.Date(df_risk$Date, "%Y-%m-%d")
library(tidyverse)
library(gganimate)
library(transformr)
library(gifski)
library(magick)
library(lubridate)
library(grid)
library(scales)
# Remove any residual lists and free up memory
rm(list = ls())
gc()
setwd("C:/Users/rober/OneDrive/Market Data")
## Use set.seed function to ensure the results are repeatable
set.seed(5)
df_stock <- read.csv("SPY.csv", stringsAsFactors = FALSE)
df_stock$Date <- as.Date(df_stock$Date, "%Y-%m-%d")
df_risk <- read.csv("VIX-I.csv", stringsAsFactors = FALSE)
df_risk$Date <- as.Date(df_risk$Date, "%Y-%m-%d")
# Subset Stock Data and Update labels
xStock <- df_stock %>%
select(Date,Close) %>%
filter(Date > "2018-12-31")
xRisk <- df_risk %>%
select(Date,Close) %>%
filter(Date > "2018-12-31")
# Create plots (p1 = cumulative sum, p2 = natural log of cumulative sum)
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p1 <- ggplot(xStock, aes(x = Date, y = Close, group = 1)) +
geom_line(size=1, color = "#00AFBB") +
scale_colour_manual(values=cbPalette) +
theme_minimal() +
transition_reveal(Date) +  # Changes plot by date
coord_cartesian(clip = 'off') +
labs(title = 'Date: {frame_along}',
y = "SP500 Index Level",
caption = "Market Correction | Chris Robertson  |  Twitter: @Robbocj01  |") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
plot.caption = element_text(hjust=1, face="italic", color="#333333"),
legend.position = c(.05, .95),
legend.justification = c("left", "top"))
a_gif <- animate(p1, 200, fps = 25, width = 310, height = 400)
p2 <- ggplot(xRisk, aes(x = Date, y = Close, group = 1)) +
geom_line(size=1, color = "#E69F00") +
scale_colour_manual(values=cbPalette) +
theme_minimal() +
transition_reveal(Date) +  # Changes plot by date
coord_cartesian(clip = 'off') +
labs(y = "VIX Index Level", caption = " ") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
plot.caption = element_text(hjust=1, face="italic", color="#333333"),
legend.position = c(.05, .95),
legend.justification = c("left", "top"))
b_gif <- animate(p2, 200, fps = 25, width = 270, height = 400)
# Combine GIF (i must be indexed from 2 to the number of frames)
a_mgif <- image_read(a_gif)
b_mgif <- image_read(b_gif)
new_gif <- image_append(c(a_mgif[1], b_mgif[1]))
for(i in 2:200){
combined <- image_append(c(a_mgif[i], b_mgif[i]))
new_gif <- c(new_gif, combined)
}
new_gif
# Save GIF
savename <- file.path(paste0("Index Movements_", format(Sys.Date(), "%d%m%Y"), ".gif")) #current date, data for day before
new_gif %>%
image_write(path=savename)
library(tidyverse)
library(gganimate)
library(transformr)
library(gifski)
library(magick)
library(lubridate)
library(grid)
library(scales)
# Remove any residual lists and free up memory
rm(list = ls())
gc()
#Sets working directory for data load
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Use set.seed function to ensure the results are repeatable
set.seed(5)
df_stock <- read.csv("SPY.csv", stringsAsFactors = FALSE)
df_stock$Date <- as.Date(df_stock$Date, "%Y-%m-%d")
df_risk <- read.csv("VIX-I.csv", stringsAsFactors = FALSE)
df_risk$Date <- as.Date(df_risk$Date, "%Y-%m-%d")
# Subset Stock Data and Update labels
xStock <- df_stock %>%
select(Date,Close) %>%
filter(Date > "2018-12-31")
xRisk <- df_risk %>%
select(Date,Close) %>%
filter(Date > "2018-12-31")
# Create plots (p1 = cumulative sum, p2 = natural log of cumulative sum)
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p1 <- ggplot(xStock, aes(x = Date, y = Close, group = 1)) +
geom_line(size=1, color = "#00AFBB") +
scale_colour_manual(values=cbPalette) +
theme_minimal() +
transition_reveal(Date) +  # Changes plot by date
coord_cartesian(clip = 'off') +
labs(title = 'Date: {frame_along}',
y = "SP500 Index Level",
caption = "Market Correction | Chris Robertson  |  Twitter: @Robbocj01  |") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
plot.caption = element_text(hjust=1, face="italic", color="#333333"),
legend.position = c(.05, .95),
legend.justification = c("left", "top"))
a_gif <- animate(p1, 200, fps = 25, width = 310, height = 400)
p2 <- ggplot(xRisk, aes(x = Date, y = Close, group = 1)) +
geom_line(size=1, color = "#E69F00") +
scale_colour_manual(values=cbPalette) +
theme_minimal() +
transition_reveal(Date) +  # Changes plot by date
coord_cartesian(clip = 'off') +
labs(y = "VIX Index Level", caption = " ") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
plot.caption = element_text(hjust=1, face="italic", color="#333333"),
legend.position = c(.05, .95),
legend.justification = c("left", "top"))
b_gif <- animate(p2, 200, fps = 25, width = 270, height = 400)
# Combine GIF (i must be indexed from 2 to the number of frames)
a_mgif <- image_read(a_gif)
b_mgif <- image_read(b_gif)
new_gif <- image_append(c(a_mgif[1], b_mgif[1]))
for(i in 2:200){
combined <- image_append(c(a_mgif[i], b_mgif[i]))
new_gif <- c(new_gif, combined)
}
new_gif
# Save GIF
savename <- file.path(paste0("Index Movements_", format(Sys.Date(), "%d%m%Y"), ".gif")) #current date, data for day before
new_gif %>%
image_write(path=savename)
library(tidyverse)
library(gganimate)
library(transformr)
library(gifski)
library(magick)
library(lubridate)
library(grid)
library(scales)
# Remove any residual lists and free up memory
rm(list = ls())
gc()
#Sets working directory for data load
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
## Use set.seed function to ensure the results are repeatable
set.seed(5)
df_stock <- read.csv("SPY.csv", stringsAsFactors = FALSE)
df_stock$Date <- as.Date(df_stock$Date, "%Y-%m-%d")
df_risk <- read.csv("VIX-I.csv", stringsAsFactors = FALSE)
df_risk$Date <- as.Date(df_risk$Date, "%Y-%m-%d")
# Subset Stock Data and Update labels
xStock <- df_stock %>%
select(Date,Close) %>%
filter(Date > "2018-12-31")
xRisk <- df_risk %>%
select(Date,Close) %>%
filter(Date > "2018-12-31")
# Create plots (p1 = cumulative sum, p2 = natural log of cumulative sum)
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p1 <- ggplot(xStock, aes(x = Date, y = Close, group = 1)) +
geom_line(size=1, color = "#00AFBB") +
scale_colour_manual(values=cbPalette) +
theme_minimal() +
transition_reveal(Date) +  # Changes plot by date
coord_cartesian(clip = 'off') +
labs(title = 'Date: {frame_along}',
y = "SP500 Index Level",
caption = "Market Correction | Chris Robertson  |  Twitter: @Robbocj01  |") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
plot.caption = element_text(hjust=1, face="italic", color="#333333"),
legend.position = c(.05, .95),
legend.justification = c("left", "top"))
a_gif <- animate(p1, 200, fps = 25, width = 310, height = 400)
p2 <- ggplot(xRisk, aes(x = Date, y = Close, group = 1)) +
geom_line(size=1, color = "#E69F00") +
scale_colour_manual(values=cbPalette) +
theme_minimal() +
transition_reveal(Date) +  # Changes plot by date
coord_cartesian(clip = 'off') +
labs(y = "VIX Index Level", caption = " ") +
theme(axis.title.x = element_text(face="bold", size=14),
axis.title.y = element_text(face="bold", size=14),
plot.caption = element_text(hjust=1, face="italic", color="#333333"),
legend.position = c(.05, .95),
legend.justification = c("left", "top"))
b_gif <- animate(p2, 200, fps = 25, width = 270, height = 400)
# Combine GIF (i must be indexed from 2 to the number of frames)
a_mgif <- image_read(a_gif)
b_mgif <- image_read(b_gif)
new_gif <- image_append(c(a_mgif[1], b_mgif[1]))
for(i in 2:200){
combined <- image_append(c(a_mgif[i], b_mgif[i]))
new_gif <- c(new_gif, combined)
}
new_gif
# Save GIF
savename <- file.path(paste0("Index Movements_", format(Sys.Date(), "%d%m%Y"), ".gif")) #current date, data for day before
new_gif %>%
image_write(path=savename)
